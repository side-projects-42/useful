{"version":3,"file":"imagedata.js","sources":["../../node_modules/typeson/dist/typeson-esm.js","../../types/imagedata.js"],"sourcesContent":["function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\n/**\n * We keep this function minimized so if using two instances of this\n *   library, where one is minimized and one is not, it will still work\n *   with `hasConstructorOf`.\n * With ES6 classes, we may be able to simply use `class TypesonPromise\n *   extends Promise` and add a string tag for detection\n * @param {function} f\n */\nvar TypesonPromise = function TypesonPromise(f) {\n  _classCallCheck(this, TypesonPromise);\n\n  this.p = new Promise(f);\n}; // eslint-disable-line block-spacing, space-before-function-paren, space-before-blocks, space-infix-ops, semi\n// class TypesonPromise extends Promise {get[Symbol.toStringTag](){return 'TypesonPromise'};} // eslint-disable-line keyword-spacing, space-before-function-paren, space-before-blocks, block-spacing, semi\n// Note: core-js-bundle provides a `Symbol` polyfill\n\n\nif (typeof Symbol !== 'undefined') {\n  // Ensure `isUserObject` will return `false` for `TypesonPromise`\n  TypesonPromise.prototype[Symbol.toStringTag] = 'TypesonPromise';\n}\n/**\n *\n * @param {function} [onFulfilled]\n * @param {function} [onRejected]\n * @returns {TypesonPromise}\n */\n\n\nTypesonPromise.prototype.then = function (onFulfilled, onRejected) {\n  var _this = this;\n\n  return new TypesonPromise(function (typesonResolve, typesonReject) {\n    _this.p.then(function (res) {\n      typesonResolve(onFulfilled ? onFulfilled(res) : res);\n    }, function (r) {\n      _this.p['catch'](function (res) {\n        return onRejected ? onRejected(res) : Promise.reject(res);\n      }).then(typesonResolve, typesonReject);\n    });\n  });\n};\n/**\n *\n * @param {function} onRejected\n * @returns {TypesonPromise}\n */\n\n\nTypesonPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\n/**\n *\n * @param {} v\n * @returns {TypesonPromise}\n */\n\n\nTypesonPromise.resolve = function (v) {\n  return new TypesonPromise(function (typesonResolve) {\n    typesonResolve(v);\n  });\n};\n/**\n *\n * @param {} v\n * @returns {TypesonPromise}\n */\n\n\nTypesonPromise.reject = function (v) {\n  return new TypesonPromise(function (typesonResolve, typesonReject) {\n    typesonReject(v);\n  });\n};\n\n['all', 'race'].map(function (meth) {\n  /**\n   *\n   * @param {Promise[]} promArr\n   * @returns {TypesonPromise}\n   */\n  TypesonPromise[meth] = function (promArr) {\n    return new TypesonPromise(function (typesonResolve, typesonReject) {\n      Promise[meth](promArr.map(function (prom) {\n        return prom.p;\n      })).then(typesonResolve, typesonReject);\n    });\n  };\n});\n\nvar _ref = {},\n    toString = _ref.toString,\n    hasOwn = {}.hasOwnProperty,\n    getProto = Object.getPrototypeOf,\n    fnToString = hasOwn.toString;\n/**\n *\n * @param {*} v\n * @param {boolean} catchCheck\n * @returns {boolean}\n */\n\nfunction isThenable(v, catchCheck) {\n  return isObject(v) && typeof v.then === 'function' && (!catchCheck || typeof v[\"catch\"] === 'function');\n}\n/**\n *\n * @param {*} val\n * @returns {string}\n */\n\n\nfunction toStringTag(val) {\n  return toString.call(val).slice(8, -1);\n}\n/**\n * This function is dependent on both constructors\n *   being identical so any minimization is expected of both.\n * @param {*} a\n * @param {function} b\n * @returns {boolean}\n */\n\n\nfunction hasConstructorOf(a, b) {\n  if (!a || _typeof(a) !== 'object') {\n    return false;\n  }\n\n  var proto = getProto(a);\n\n  if (!proto) {\n    return false;\n  }\n\n  var Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;\n\n  if (typeof Ctor !== 'function') {\n    return b === null;\n  }\n\n  return typeof Ctor === 'function' && b !== null && fnToString.call(Ctor) === fnToString.call(b);\n}\n/**\n *\n * @param {*} val\n * @returns {boolean}\n */\n\n\nfunction isPlainObject(val) {\n  // Mirrors jQuery's\n  if (!val || toStringTag(val) !== 'Object') {\n    return false;\n  }\n\n  var proto = getProto(val);\n\n  if (!proto) {\n    // `Object.create(null)`\n    return true;\n  }\n\n  return hasConstructorOf(val, Object);\n}\n/**\n *\n * @param {*} val\n * @returns {boolean}\n */\n\n\nfunction isUserObject(val) {\n  if (!val || toStringTag(val) !== 'Object') {\n    return false;\n  }\n\n  var proto = getProto(val);\n\n  if (!proto) {\n    // `Object.create(null)`\n    return true;\n  }\n\n  return hasConstructorOf(val, Object) || isUserObject(proto);\n}\n/**\n *\n * @param {*} v\n * @returns {boolean}\n */\n\n\nfunction isObject(v) {\n  return v && _typeof(v) === 'object';\n}\n/**\n *\n * @param {string} keyPathComponent\n * @returns {string}\n */\n\n\nfunction escapeKeyPathComponent(keyPathComponent) {\n  return keyPathComponent.replace(/~/g, '~0').replace(/\\./g, '~1');\n}\n/**\n *\n * @param {string} keyPathComponent\n * @returns {string}\n */\n\n\nfunction unescapeKeyPathComponent(keyPathComponent) {\n  return keyPathComponent.replace(/~1/g, '.').replace(/~0/g, '~');\n}\n/**\n * @param {object|array} obj\n * @param {string} keyPath\n * @returns {*}\n */\n\n\nfunction getByKeyPath(obj, keyPath) {\n  if (keyPath === '') {\n    return obj;\n  }\n\n  var period = keyPath.indexOf('.');\n\n  if (period > -1) {\n    var innerObj = obj[unescapeKeyPathComponent(keyPath.substr(0, period))];\n    return innerObj === undefined ? undefined : getByKeyPath(innerObj, keyPath.substr(period + 1));\n  }\n\n  return obj[unescapeKeyPathComponent(keyPath)];\n}\n\nfunction setAtKeyPath(obj, keyPath, value) {\n  if (keyPath === '') {\n    return value;\n  }\n\n  var period = keyPath.indexOf('.');\n\n  if (period > -1) {\n    var innerObj = obj[unescapeKeyPathComponent(keyPath.substr(0, period))];\n    return setAtKeyPath(innerObj, keyPath.substr(period + 1), value);\n  }\n\n  obj[unescapeKeyPathComponent(keyPath)] = value;\n  return obj;\n}\n/**\n *\n * @param {external:JSON} value\n * @returns {\"null\"|\"array\"|\"undefined\"|\"boolean\"|\"number\"|\"string\"|\"object\"|\"symbol\"}\n */\n\n\nfunction getJSONType(value) {\n  return value === null ? 'null' : Array.isArray(value) ? 'array' : _typeof(value);\n}\n\nvar keys = Object.keys,\n    isArray = Array.isArray,\n    hasOwn$1 = {}.hasOwnProperty,\n    internalStateObjPropsToIgnore = ['type', 'replaced', 'iterateIn', 'iterateUnsetNumeric'];\n\nfunction nestedPathsFirst(a, b) {\n  var as = a.keypath.match(/\\./g);\n  var bs = a.keypath.match(/\\./g);\n\n  if (as) {\n    as = as.length;\n  }\n\n  if (bs) {\n    bs = bs.length;\n  }\n\n  return as > bs ? -1 : as < bs ? 1 : a.keypath < b.keypath ? -1 : a.keypath > b.keypath;\n}\n/**\n * An instance of this class can be used to call `stringify()` and `parse()`.\n * Typeson resolves cyclic references by default. Can also be extended to\n * support custom types using the register() method.\n *\n * @constructor\n * @param {{cyclic: boolean}} [options] - if cyclic (default true),\n *   cyclic references will be handled gracefully.\n */\n\n\nvar Typeson =\n/*#__PURE__*/\nfunction () {\n  function Typeson(options) {\n    _classCallCheck(this, Typeson);\n\n    this.options = options; // Replacers signature: replace (value). Returns falsy if not\n    //   replacing. Otherwise ['Date', value.getTime()]\n\n    this.plainObjectReplacers = [];\n    this.nonplainObjectReplacers = []; // Revivers: [{type => reviver}, {plain: boolean}].\n    //   Sample: [{'Date': value => new Date(value)}, {plain: false}]\n\n    this.revivers = {};\n    /** Types registered via register() */\n\n    this.types = {};\n  }\n  /**\n   * Serialize given object to Typeson.\n   * Initial arguments work identical to those of `JSON.stringify`.\n   * The `replacer` argument has nothing to do with our replacers.\n   * @param {*} obj\n   * @param {function|string[]} replacer\n   * @param {number|string} space\n   * @param {object} opts\n   * @returns {string|Promise} Promise resolves to a string\n   */\n\n\n  _createClass(Typeson, [{\n    key: \"stringify\",\n    value: function stringify(obj, replacer, space, opts) {\n      opts = _objectSpread({}, this.options, opts, {\n        stringification: true\n      });\n      var encapsulated = this.encapsulate(obj, null, opts);\n\n      if (isArray(encapsulated)) {\n        return JSON.stringify(encapsulated[0], replacer, space);\n      }\n\n      return encapsulated.then(function (res) {\n        return JSON.stringify(res, replacer, space);\n      });\n    }\n    /**\n     * Also sync but throws on non-sync result\n     * @param {*} obj\n     * @param {function|string[]} replacer\n     * @param {number|string} space\n     * @param {object} opts\n     * @returns {string}\n     */\n\n  }, {\n    key: \"stringifySync\",\n    value: function stringifySync(obj, replacer, space, opts) {\n      return this.stringify(obj, replacer, space, _objectSpread({\n        throwOnBadSyncType: true\n      }, opts, {\n        sync: true\n      }));\n    }\n    /**\n     *\n     * @param {*} obj\n     * @param {function|string[]} replacer\n     * @param {number|string} space\n     * @param {object} opts\n     * @returns {Promise} Resolves to string\n     */\n\n  }, {\n    key: \"stringifyAsync\",\n    value: function stringifyAsync(obj, replacer, space, opts) {\n      return this.stringify(obj, replacer, space, _objectSpread({\n        throwOnBadSyncType: true\n      }, opts, {\n        sync: false\n      }));\n    }\n    /**\n     * Parse Typeson back into an obejct.\n     * Initial arguments works identical to those of `JSON.parse()`.\n     * @param {string} text\n     * @param {function} reviver This JSON reviver has nothing to do with\n     *   our revivers.\n     * @param {object} opts\n     * @returns {external:JSON}\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(text, reviver, opts) {\n      opts = _objectSpread({}, this.options, opts, {\n        parse: true\n      });\n      return this.revive(JSON.parse(text, reviver), opts);\n    }\n    /**\n    * Also sync but throws on non-sync result\n    * @param {string} text\n    * @param {function} reviver This JSON reviver has nothing to do with\n    *   our revivers.\n    * @param {object} opts\n    * @returns {external:JSON}\n    */\n\n  }, {\n    key: \"parseSync\",\n    value: function parseSync(text, reviver, opts) {\n      return this.parse(text, reviver, _objectSpread({\n        throwOnBadSyncType: true\n      }, opts, {\n        sync: true\n      }));\n    }\n    /**\n    * @param {string} text\n    * @param {function} reviver This JSON reviver has nothing to do with\n    *   our revivers.\n    * @param {object} opts\n    * @returns {Promise} Resolves to `external:JSON`\n    */\n\n  }, {\n    key: \"parseAsync\",\n    value: function parseAsync(text, reviver, opts) {\n      return this.parse(text, reviver, _objectSpread({\n        throwOnBadSyncType: true\n      }, opts, {\n        sync: false\n      }));\n    }\n    /**\n     *\n     * @param {*} obj\n     * @param {object} stateObj\n     * @param {object} [opts={}]\n     * @returns {string[]|false}\n     */\n\n  }, {\n    key: \"specialTypeNames\",\n    value: function specialTypeNames(obj, stateObj) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      opts.returnTypeNames = true;\n      return this.encapsulate(obj, stateObj, opts);\n    }\n    /**\n     *\n     * @param {*} obj\n     * @param {object} stateObj\n     * @param {object} [opts={}]\n     * @returns {Promise|Array|object|string|false}\n     */\n\n  }, {\n    key: \"rootTypeName\",\n    value: function rootTypeName(obj, stateObj) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      opts.iterateNone = true;\n      return this.encapsulate(obj, stateObj, opts);\n    }\n    /**\n     * Encapsulate a complex object into a plain Object by replacing\n     * registered types with plain objects representing the types data.\n     *\n     * This method is used internally by T`ypeson.stringify()`.\n     * @param {Object} obj - Object to encapsulate.\n     * @param {object} stateObj\n     * @param {object} opts\n     * @returns {Promise|Array|object|string|false}\n     */\n\n  }, {\n    key: \"encapsulate\",\n    value: function encapsulate(obj, stateObj, opts) {\n      opts = _objectSpread({\n        sync: true\n      }, this.options, opts);\n      var _opts = opts,\n          sync = _opts.sync;\n      var that = this,\n          types = {},\n          refObjs = [],\n          // For checking cyclic references\n      refKeys = [],\n          // For checking cyclic references\n      promisesDataRoot = []; // Clone the object deeply while at the same time replacing any\n      //   special types or cyclic reference:\n\n      var cyclic = 'cyclic' in opts ? opts.cyclic : true;\n      var _opts2 = opts,\n          encapsulateObserver = _opts2.encapsulateObserver;\n\n      var ret = _encapsulate('', obj, cyclic, stateObj || {}, promisesDataRoot);\n      /**\n       *\n       * @param {*} ret\n       * @returns {Array|object|string|false}\n       */\n\n\n      function finish(ret) {\n        // Add `$types` to result only if we ever bumped into a\n        //  special type (or special case where object has own `$types`)\n        var typeNames = Object.values(types);\n\n        if (opts.iterateNone) {\n          if (typeNames.length) {\n            return typeNames[0];\n          }\n\n          return Typeson.getJSONType(ret);\n        }\n\n        if (typeNames.length) {\n          if (opts.returnTypeNames) {\n            return _toConsumableArray(new Set(typeNames));\n          } // Special if array (or a primitive) was serialized\n          //   because JSON would ignore custom `$types` prop on it\n\n\n          if (!ret || !isPlainObject(ret) || // Also need to handle if this is an object with its\n          //   own `$types` property (to avoid ambiguity)\n          hasOwn$1.call(ret, '$types')) {\n            ret = {\n              $: ret,\n              $types: {\n                $: types\n              }\n            };\n          } else {\n            ret.$types = types;\n          } // No special types\n\n        } else if (isObject(ret) && hasOwn$1.call(ret, '$types')) {\n          ret = {\n            $: ret,\n            $types: true\n          };\n        }\n\n        if (opts.returnTypeNames) {\n          return false;\n        }\n\n        return ret;\n      }\n      /**\n       *\n       * @param {*} ret\n       * @param {array} promisesData\n       * @returns {Promise} Resolves to ...\n       */\n\n\n      function checkPromises(_x, _x2) {\n        return _checkPromises.apply(this, arguments);\n      }\n      /**\n       *\n       * @param {object} stateObj\n       * @param {object} ownKeysObj\n       * @param {function} cb\n       * @returns {undefined}\n       */\n\n\n      function _checkPromises() {\n        _checkPromises = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee2(ret, promisesData) {\n          var promResults;\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return Promise.all(promisesData.map(function (pd) {\n                    return pd[1].p;\n                  }));\n\n                case 2:\n                  promResults = _context2.sent;\n                  _context2.next = 5;\n                  return Promise.all(promResults.map(\n                  /*#__PURE__*/\n                  function () {\n                    var _ref = _asyncToGenerator(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee(promResult) {\n                      var newPromisesData, _promisesData$splice, _promisesData$splice2, prData, _prData, keyPath, cyclic, stateObj, parentObj, key, detectedType, encaps, isTypesonPromise, encaps2;\n\n                      return regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              newPromisesData = [];\n                              _promisesData$splice = promisesData.splice(0, 1), _promisesData$splice2 = _slicedToArray(_promisesData$splice, 1), prData = _promisesData$splice2[0];\n                              _prData = _slicedToArray(prData, 7), keyPath = _prData[0], cyclic = _prData[2], stateObj = _prData[3], parentObj = _prData[4], key = _prData[5], detectedType = _prData[6];\n                              encaps = _encapsulate(keyPath, promResult, cyclic, stateObj, newPromisesData, true, detectedType);\n                              isTypesonPromise = hasConstructorOf(encaps, TypesonPromise); // Handle case where an embedded custom type itself\n                              //   returns a `Typeson.Promise`\n\n                              if (!(keyPath && isTypesonPromise)) {\n                                _context.next = 11;\n                                break;\n                              }\n\n                              _context.next = 8;\n                              return encaps.p;\n\n                            case 8:\n                              encaps2 = _context.sent;\n                              parentObj[key] = encaps2;\n                              return _context.abrupt(\"return\", checkPromises(ret, newPromisesData));\n\n                            case 11:\n                              if (keyPath) {\n                                parentObj[key] = encaps;\n                              } else if (isTypesonPromise) {\n                                ret = encaps.p;\n                              } else {\n                                // If this is itself a `Typeson.Promise` (because the\n                                //   original value supplied was a `Promise` or\n                                //   because the supplied custom type value resolved\n                                //   to one), returning it below will be fine since\n                                //   a `Promise` is expected anyways given current\n                                //   config (and if not a `Promise`, it will be ready\n                                //   as the resolve value)\n                                ret = encaps;\n                              }\n\n                              return _context.abrupt(\"return\", checkPromises(ret, newPromisesData));\n\n                            case 13:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee);\n                    }));\n\n                    return function (_x3) {\n                      return _ref.apply(this, arguments);\n                    };\n                  }()));\n\n                case 5:\n                  return _context2.abrupt(\"return\", ret);\n\n                case 6:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n        return _checkPromises.apply(this, arguments);\n      }\n\n      function _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, cb) {\n        Object.assign(stateObj, ownKeysObj);\n        var vals = internalStateObjPropsToIgnore.map(function (prop) {\n          var tmp = stateObj[prop];\n          delete stateObj[prop];\n          return tmp;\n        });\n        cb();\n        internalStateObjPropsToIgnore.forEach(function (prop, i) {\n          stateObj[prop] = vals[i];\n        });\n      }\n      /**\n       *\n       * @param {string} keypath\n       * @param {*} value\n       * @param {boolean} cyclic\n       * @param {object} stateObj\n       * @param {boolean} promisesData\n       * @param {boolean} resolvingTypesonPromise\n       * @param {string} detectedType\n       * @returns {*}\n       */\n\n\n      function _encapsulate(keypath, value, cyclic, stateObj, promisesData, resolvingTypesonPromise, detectedType) {\n        var ret;\n        var observerData = {};\n\n        var $typeof = _typeof(value);\n\n        var runObserver = encapsulateObserver ? function (obj) {\n          var type = detectedType || stateObj.type || Typeson.getJSONType(value);\n          encapsulateObserver(Object.assign(obj || observerData, {\n            keypath: keypath,\n            value: value,\n            cyclic: cyclic,\n            stateObj: stateObj,\n            promisesData: promisesData,\n            resolvingTypesonPromise: resolvingTypesonPromise,\n            awaitingTypesonPromise: hasConstructorOf(value, TypesonPromise)\n          }, type !== undefined ? {\n            type: type\n          } : {}));\n        } : null;\n\n        if (['string', 'boolean', 'number', 'undefined'].includes($typeof)) {\n          if (value === undefined || $typeof === 'number' && (isNaN(value) || value === -Infinity || value === Infinity)) {\n            ret = replace(keypath, value, stateObj, promisesData, false, resolvingTypesonPromise, runObserver);\n\n            if (ret !== value) {\n              observerData = {\n                replaced: ret\n              };\n            }\n          } else {\n            ret = value;\n          }\n\n          if (runObserver) {\n            runObserver();\n          }\n\n          return ret;\n        }\n\n        if (value === null) {\n          if (runObserver) {\n            runObserver();\n          }\n\n          return value;\n        }\n\n        if (cyclic && !stateObj.iterateIn && !stateObj.iterateUnsetNumeric) {\n          // Options set to detect cyclic references and be able\n          //   to rewrite them.\n          var refIndex = refObjs.indexOf(value);\n\n          if (refIndex < 0) {\n            if (cyclic === true) {\n              refObjs.push(value);\n              refKeys.push(keypath);\n            }\n          } else {\n            types[keypath] = '#';\n\n            if (runObserver) {\n              runObserver({\n                cyclicKeypath: refKeys[refIndex]\n              });\n            }\n\n            return '#' + refKeys[refIndex];\n          }\n        }\n\n        var isPlainObj = isPlainObject(value);\n        var isArr = isArray(value);\n        var replaced = // Running replace will cause infinite loop as will test\n        //   positive again\n        (isPlainObj || isArr) && (!that.plainObjectReplacers.length || stateObj.replaced) || stateObj.iterateIn ? // Optimization: if plain object and no plain-object\n        //   replacers, don't try finding a replacer\n        value : replace(keypath, value, stateObj, promisesData, isPlainObj || isArr, null, runObserver);\n        var clone;\n\n        if (replaced !== value) {\n          ret = replaced;\n          observerData = {\n            replaced: replaced\n          };\n        } else {\n          if (isArr && stateObj.iterateIn !== 'object' || stateObj.iterateIn === 'array') {\n            clone = new Array(value.length);\n            observerData = {\n              clone: clone\n            };\n          } else if (isPlainObj || stateObj.iterateIn === 'object') {\n            clone = {};\n\n            if (stateObj.addLength) {\n              clone.length = value.length;\n            }\n\n            observerData = {\n              clone: clone\n            };\n          } else if (keypath === '' && hasConstructorOf(value, TypesonPromise)) {\n            promisesData.push([keypath, value, cyclic, stateObj, undefined, undefined, stateObj.type]);\n            ret = value;\n          } else {\n            ret = value; // Only clone vanilla objects and arrays\n          }\n        }\n\n        if (runObserver) {\n          runObserver();\n        }\n\n        if (opts.iterateNone) {\n          return clone || ret;\n        }\n\n        if (!clone) {\n          return ret;\n        } // Iterate object or array\n\n\n        if (stateObj.iterateIn) {\n          var _loop = function _loop(key) {\n            var ownKeysObj = {\n              ownKeys: hasOwn$1.call(value, key)\n            };\n\n            _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, function () {\n              var kp = keypath + (keypath ? '.' : '') + escapeKeyPathComponent(key);\n\n              var val = _encapsulate(kp, value[key], !!cyclic, stateObj, promisesData, resolvingTypesonPromise);\n\n              if (hasConstructorOf(val, TypesonPromise)) {\n                promisesData.push([kp, val, !!cyclic, stateObj, clone, key, stateObj.type]);\n              } else if (val !== undefined) {\n                clone[key] = val;\n              }\n            });\n          };\n\n          for (var key in value) {\n            _loop(key);\n          }\n\n          if (runObserver) {\n            runObserver({\n              endIterateIn: true,\n              end: true\n            });\n          }\n        } else {\n          // Note: Non-indexes on arrays won't survive stringify so\n          //  somewhat wasteful for arrays, but so too is iterating\n          //  all numeric indexes on sparse arrays when not wanted\n          //  or filtering own keys for positive integers\n          keys(value).forEach(function (key) {\n            var kp = keypath + (keypath ? '.' : '') + escapeKeyPathComponent(key);\n            var ownKeysObj = {\n              ownKeys: true\n            };\n\n            _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, function () {\n              var val = _encapsulate(kp, value[key], !!cyclic, stateObj, promisesData, resolvingTypesonPromise);\n\n              if (hasConstructorOf(val, TypesonPromise)) {\n                promisesData.push([kp, val, !!cyclic, stateObj, clone, key, stateObj.type]);\n              } else if (val !== undefined) {\n                clone[key] = val;\n              }\n            });\n          });\n\n          if (runObserver) {\n            runObserver({\n              endIterateOwn: true,\n              end: true\n            });\n          }\n        } // Iterate array for non-own numeric properties (we can't\n        //   replace the prior loop though as it iterates non-integer\n        //   keys)\n\n\n        if (stateObj.iterateUnsetNumeric) {\n          var vl = value.length;\n\n          var _loop2 = function _loop2(i) {\n            if (!(i in value)) {\n              // No need to escape numeric\n              var kp = keypath + (keypath ? '.' : '') + i;\n              var ownKeysObj = {\n                ownKeys: false\n              };\n\n              _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, function () {\n                var val = _encapsulate(kp, undefined, !!cyclic, stateObj, promisesData, resolvingTypesonPromise);\n\n                if (hasConstructorOf(val, TypesonPromise)) {\n                  promisesData.push([kp, val, !!cyclic, stateObj, clone, i, stateObj.type]);\n                } else if (val !== undefined) {\n                  clone[i] = val;\n                }\n              });\n            }\n          };\n\n          for (var i = 0; i < vl; i++) {\n            _loop2(i);\n          }\n\n          if (runObserver) {\n            runObserver({\n              endIterateUnsetNumeric: true,\n              end: true\n            });\n          }\n        }\n\n        return clone;\n      }\n      /**\n       *\n       * @param {string} keypath\n       * @param {*} value\n       * @param {object} stateObj\n       * @param {array} promisesData\n       * @param {boolean} plainObject\n       * @param {boolean} resolvingTypesonPromise\n       * @param {function} [runObserver]\n       * @returns {*}\n       */\n\n\n      function replace(keypath, value, stateObj, promisesData, plainObject, resolvingTypesonPromise, runObserver) {\n        // Encapsulate registered types\n        var replacers = plainObject ? that.plainObjectReplacers : that.nonplainObjectReplacers;\n        var i = replacers.length;\n\n        while (i--) {\n          var replacer = replacers[i];\n\n          if (replacer.test(value, stateObj)) {\n            var type = replacer.type;\n\n            if (that.revivers[type]) {\n              // Record the type only if a corresponding reviver\n              //   exists. This is to support specs where only\n              //   replacement is done.\n              // For example, ensuring deep cloning of the object,\n              //   or replacing a type to its equivalent without\n              //   the need to revive it.\n              var existing = types[keypath]; // type can comprise an array of types (see test\n              //   `shouldSupportIntermediateTypes`)\n\n              types[keypath] = existing ? [type].concat(existing) : type;\n            } // Now, also traverse the result in case it contains its\n            //   own types to replace\n\n\n            Object.assign(stateObj, {\n              type: type,\n              replaced: true\n            });\n\n            if ((sync || !replacer.replaceAsync) && !replacer.replace) {\n              if (runObserver) {\n                runObserver({\n                  typeDetected: true\n                });\n              }\n\n              return _encapsulate(keypath, value, cyclic && 'readonly', stateObj, promisesData, resolvingTypesonPromise, type);\n            }\n\n            if (runObserver) {\n              runObserver({\n                replacing: true\n              });\n            }\n\n            var replaceMethod = sync || !replacer.replaceAsync ? 'replace' : 'replaceAsync';\n            return _encapsulate(keypath, replacer[replaceMethod](value, stateObj), cyclic && 'readonly', stateObj, promisesData, resolvingTypesonPromise, type);\n          }\n        }\n\n        return value;\n      }\n\n      return promisesDataRoot.length ? sync && opts.throwOnBadSyncType ? function () {\n        throw new TypeError('Sync method requested but async result obtained');\n      }() : Promise.resolve(checkPromises(ret, promisesDataRoot)).then(finish) : !sync && opts.throwOnBadSyncType ? function () {\n        throw new TypeError('Async method requested but sync result obtained');\n      }() // If this is a synchronous request for stringification, yet\n      //   a promise is the result, we don't want to resolve leading\n      //   to an async result, so we return an array to avoid\n      //   ambiguity\n      : opts.stringification && sync ? [finish(ret)] : sync ? finish(ret) : Promise.resolve(finish(ret));\n    }\n    /**\n     * Also sync but throws on non-sync result\n     * @param {*} obj\n     * @param {object} stateObj\n     * @param {object} opts\n     * @returns {*}\n     */\n\n  }, {\n    key: \"encapsulateSync\",\n    value: function encapsulateSync(obj, stateObj, opts) {\n      return this.encapsulate(obj, stateObj, _objectSpread({\n        throwOnBadSyncType: true\n      }, opts, {\n        sync: true\n      }));\n    }\n    /**\n     * @param {*} obj\n     * @param {object} stateObj\n     * @param {object} opts\n     * @returns {*}\n     */\n\n  }, {\n    key: \"encapsulateAsync\",\n    value: function encapsulateAsync(obj, stateObj, opts) {\n      return this.encapsulate(obj, stateObj, _objectSpread({\n        throwOnBadSyncType: true\n      }, opts, {\n        sync: false\n      }));\n    }\n    /**\n     * Revive an encapsulated object.\n     * This method is used internally by `Typeson.parse()`.\n     * @param {object} obj - Object to revive. If it has `$types` member, the\n     *   properties that are listed there will be replaced with its true type\n     *   instead of just plain objects.\n     * @param {object} opts\n     * @throws TypeError If mismatch between sync/async type and result\n     * @returns {Promise|*} If async, returns a Promise that resolves to `*`\n     */\n\n  }, {\n    key: \"revive\",\n    value: function revive(obj, opts) {\n      var types = obj && obj.$types; // No type info added. Revival not needed.\n\n      if (!types) {\n        return obj;\n      } // Object happened to have own `$types` property but with\n      //   no actual types, so we unescape and return that object\n\n\n      if (types === true) {\n        return obj.$;\n      }\n\n      opts = _objectSpread({\n        sync: true\n      }, this.options, opts);\n      var _opts3 = opts,\n          sync = _opts3.sync;\n      var keyPathResolutions = [];\n      var stateObj = {};\n      var ignore$Types = true; // Special when root object is not a trivial Object, it will\n      //   be encapsulated in `$`. It will also be encapsulated in\n      //   `$` if it has its own `$` property to avoid ambiguity\n\n      if (types.$ && isPlainObject(types.$)) {\n        obj = obj.$;\n        types = types.$;\n        ignore$Types = false;\n      }\n\n      var that = this;\n\n      function revivePlainObjects() {\n        // const references = [];\n        // const reviveTypes = [];\n        var plainObjectTypes = [];\n        Object.entries(types).forEach(function (_ref2) {\n          var _ref3 = _slicedToArray(_ref2, 2),\n              keypath = _ref3[0],\n              type = _ref3[1];\n\n          if (type === '#') {\n            /*\n            references.push({\n                keypath,\n                reference: getByKeyPath(obj, keypath)\n            });\n            */\n            return;\n          }\n\n          [].concat(type).forEach(function (type) {\n            var _that$revivers$type = _slicedToArray(that.revivers[type], 2),\n                plain = _that$revivers$type[1].plain;\n\n            if (!plain) {\n              // reviveTypes.push({keypath, type});\n              return;\n            }\n\n            plainObjectTypes.push({\n              keypath: keypath,\n              type: type\n            });\n            delete types[keypath]; // Avoid repeating\n          });\n        });\n\n        if (!plainObjectTypes.length) {\n          return;\n        } // Handle plain object revivers first so reference\n        //   setting can use revived type (e.g., array instead\n        //   of object); assumes revived has same structure\n        //   or will otherwise break subsequent references\n\n\n        return plainObjectTypes.sort(nestedPathsFirst).reduce(function reducer(possibleTypesonPromise, _ref4) {\n          var keypath = _ref4.keypath,\n              type = _ref4.type;\n\n          if (hasConstructorOf(possibleTypesonPromise, TypesonPromise)) {\n            // TypesonPromise here too\n            return possibleTypesonPromise.then(function (v) {\n              return reducer(v, type);\n            });\n          }\n\n          var val = getByKeyPath(obj, keypath);\n\n          if (hasConstructorOf(val, TypesonPromise)) {\n            return val.then(function (v) {\n              // TypesonPromise here too\n              return reducer(v, type);\n            });\n          }\n\n          var _that$revivers$type2 = _slicedToArray(that.revivers[type], 1),\n              reviver = _that$revivers$type2[0];\n\n          if (!reviver) {\n            throw new Error('Unregistered type: ' + type);\n          }\n\n          val = reviver[sync && reviver.revive ? 'revive' : !sync && reviver.reviveAsync ? 'reviveAsync' : 'revive'](val, stateObj);\n\n          if (val === undefined) {\n            return undefined;\n          }\n\n          if (hasConstructorOf(val, Undefined)) {\n            val = undefined;\n          }\n\n          var newVal = setAtKeyPath(obj, keypath, val);\n\n          if (newVal === val) {\n            obj = val;\n          }\n\n          return undefined;\n        }, undefined // This argument must be explicit\n        ); // references.forEach(({keypath, reference}) => {});\n        // reviveTypes.sort(nestedPathsFirst).forEach(() => {});\n      }\n      /**\n       *\n       * @param {string} keypath\n       * @param {*} value\n       * @param {?(Array|object)} target\n       * @param {Array|object} [clone]\n       * @param {string} [key]\n       * @returns {*}\n       */\n\n\n      function _revive(keypath, value, target, clone, key) {\n        if (ignore$Types && keypath === '$types') {\n          return undefined;\n        }\n\n        var type = types[keypath];\n\n        if (isArray(value) || isPlainObject(value)) {\n          var _clone = isArray(value) ? new Array(value.length) : {}; // Iterate object or array\n\n\n          keys(value).forEach(function (k) {\n            var val = _revive(keypath + (keypath ? '.' : '') + escapeKeyPathComponent(k), value[k], target || _clone, _clone, k);\n\n            if (hasConstructorOf(val, Undefined)) {\n              _clone[k] = undefined;\n            } else if (val !== undefined) {\n              _clone[k] = val;\n            }\n          });\n          value = _clone; // Try to resolve cyclic reference as soon as available\n\n          while (keyPathResolutions.length) {\n            var _keyPathResolutions$ = _slicedToArray(keyPathResolutions[0], 4),\n                _target = _keyPathResolutions$[0],\n                keyPath = _keyPathResolutions$[1],\n                _clone2 = _keyPathResolutions$[2],\n                k = _keyPathResolutions$[3];\n\n            var val = getByKeyPath(_target, keyPath);\n\n            if (hasConstructorOf(val, Undefined)) {\n              _clone2[k] = undefined;\n            } else if (val !== undefined) {\n              _clone2[k] = val;\n            } else {\n              break;\n            }\n\n            keyPathResolutions.splice(0, 1);\n          }\n        }\n\n        if (!type) {\n          return value;\n        }\n\n        if (type === '#') {\n          var _ret = getByKeyPath(target, value.slice(1));\n\n          if (_ret === undefined) {\n            // Cyclic reference not yet available\n            keyPathResolutions.push([target, value.slice(1), clone, key]);\n          }\n\n          return _ret;\n        }\n\n        return [].concat(type).reduce(function reducer(val, type) {\n          if (hasConstructorOf(val, TypesonPromise)) {\n            return val.then(function (v) {\n              // TypesonPromise here too\n              return reducer(v, type);\n            });\n          }\n\n          var _that$revivers$type3 = _slicedToArray(that.revivers[type], 1),\n              reviver = _that$revivers$type3[0];\n\n          if (!reviver) {\n            throw new Error('Unregistered type: ' + type);\n          }\n\n          return reviver[sync && reviver.revive ? 'revive' : !sync && reviver.reviveAsync ? 'reviveAsync' : 'revive'](val, stateObj);\n        }, value);\n      }\n\n      function checkUndefined(retrn) {\n        return hasConstructorOf(retrn, Undefined) ? undefined : retrn;\n      }\n\n      var possibleTypesonPromise = revivePlainObjects();\n      var ret;\n\n      if (hasConstructorOf(possibleTypesonPromise, TypesonPromise)) {\n        ret = possibleTypesonPromise.then(function () {\n          return _revive('', obj, null);\n        });\n      } else {\n        ret = _revive('', obj, null);\n      }\n\n      return isThenable(ret) ? sync && opts.throwOnBadSyncType ? function () {\n        throw new TypeError('Sync method requested but async result obtained');\n      }() : hasConstructorOf(ret, TypesonPromise) ? ret.p.then(checkUndefined) : ret : !sync && opts.throwOnBadSyncType ? function () {\n        throw new TypeError('Async method requested but sync result obtained');\n      }() : sync ? checkUndefined(ret) : Promise.resolve(checkUndefined(ret));\n    }\n    /**\n     * Also sync but throws on non-sync result\n     * @param {*} obj\n     * @param {object} opts\n     * @returns {*}\n     */\n\n  }, {\n    key: \"reviveSync\",\n    value: function reviveSync(obj, opts) {\n      return this.revive(obj, _objectSpread({\n        throwOnBadSyncType: true\n      }, opts, {\n        sync: true\n      }));\n    }\n    /**\n    * @param {*} obj\n    * @param {object} opts\n    * @returns {Promise} Resolves to `*`\n    */\n\n  }, {\n    key: \"reviveAsync\",\n    value: function reviveAsync(obj, opts) {\n      return this.revive(obj, _objectSpread({\n        throwOnBadSyncType: true\n      }, opts, {\n        sync: false\n      }));\n    }\n    /**\n     * Register types.\n     * For examples on how to use this method, see\n     *   {@link https://github.com/dfahlander/typeson-registry/tree/master/types}\n     * @param {Array.<Object.<string,Function[]>>} typeSpecSets - Types and\n     *   their functions [test, encapsulate, revive];\n     * @param {object} opts\n     * @returns {Typeson}\n     */\n\n  }, {\n    key: \"register\",\n    value: function register(typeSpecSets, opts) {\n      opts = opts || {};\n      [].concat(typeSpecSets).forEach(function R(typeSpec) {\n        // Allow arrays of arrays of arrays...\n        if (isArray(typeSpec)) {\n          return typeSpec.map(R, this);\n        }\n\n        typeSpec && keys(typeSpec).forEach(function (typeId) {\n          if (typeId === '#') {\n            throw new TypeError('# cannot be used as a type name as it is reserved ' + 'for cyclic objects');\n          } else if (Typeson.JSON_TYPES.includes(typeId)) {\n            throw new TypeError('Plain JSON object types are reserved as type names');\n          }\n\n          var spec = typeSpec[typeId];\n          var replacers = spec.testPlainObjects ? this.plainObjectReplacers : this.nonplainObjectReplacers;\n          var existingReplacer = replacers.filter(function (r) {\n            return r.type === typeId;\n          });\n\n          if (existingReplacer.length) {\n            // Remove existing spec and replace with this one.\n            replacers.splice(replacers.indexOf(existingReplacer[0]), 1);\n            delete this.revivers[typeId];\n            delete this.types[typeId];\n          }\n\n          if (!spec) {\n            return;\n          }\n\n          if (typeof spec === 'function') {\n            // Support registering just a class without replacer/reviver\n            var Class = spec;\n            spec = {\n              test: function test(x) {\n                return x && x.constructor === Class;\n              },\n              replace: function replace(x) {\n                return Object.assign({}, x);\n              },\n              revive: function revive(x) {\n                return Object.assign(Object.create(Class.prototype), x);\n              }\n            };\n          } else if (isArray(spec)) {\n            var _spec = spec,\n                _spec2 = _slicedToArray(_spec, 3),\n                test = _spec2[0],\n                replace = _spec2[1],\n                revive = _spec2[2];\n\n            spec = {\n              test: test,\n              replace: replace,\n              revive: revive\n            };\n          }\n\n          var replacerObj = {\n            type: typeId,\n            test: spec.test.bind(spec)\n          };\n\n          if (spec.replace) {\n            replacerObj.replace = spec.replace.bind(spec);\n          }\n\n          if (spec.replaceAsync) {\n            replacerObj.replaceAsync = spec.replaceAsync.bind(spec);\n          }\n\n          var start = typeof opts.fallback === 'number' ? opts.fallback : opts.fallback ? 0 : Infinity;\n\n          if (spec.testPlainObjects) {\n            this.plainObjectReplacers.splice(start, 0, replacerObj);\n          } else {\n            this.nonplainObjectReplacers.splice(start, 0, replacerObj);\n          } // Todo: We might consider a testAsync type\n\n\n          if (spec.revive || spec.reviveAsync) {\n            var reviverObj = {};\n\n            if (spec.revive) {\n              reviverObj.revive = spec.revive.bind(spec);\n            }\n\n            if (spec.reviveAsync) {\n              reviverObj.reviveAsync = spec.reviveAsync.bind(spec);\n            }\n\n            this.revivers[typeId] = [reviverObj, {\n              plain: spec.testPlainObjects\n            }];\n          } // Record to be retrieved via public types property.\n\n\n          this.types[typeId] = spec;\n        }, this);\n      }, this);\n      return this;\n    }\n  }]);\n\n  return Typeson;\n}();\n/**\n * We keep this function minimized so if using two instances of this\n * library, where one is minimized and one is not, it will still work\n * with `hasConstructorOf`.\n * @constructor\n */\n\n\nvar Undefined = function Undefined() {\n  _classCallCheck(this, Undefined);\n}; // eslint-disable-line space-before-blocks\n// The following provide classes meant to avoid clashes with other values\n// To insist `undefined` should be added\n\n\nTypeson.Undefined = Undefined; // To support async encapsulation/stringification\n\nTypeson.Promise = TypesonPromise; // Some fundamental type-checking utilities\n\nTypeson.isThenable = isThenable;\nTypeson.toStringTag = toStringTag;\nTypeson.hasConstructorOf = hasConstructorOf;\nTypeson.isObject = isObject;\nTypeson.isPlainObject = isPlainObject;\nTypeson.isUserObject = isUserObject;\nTypeson.escapeKeyPathComponent = escapeKeyPathComponent;\nTypeson.unescapeKeyPathComponent = unescapeKeyPathComponent;\nTypeson.getByKeyPath = getByKeyPath;\nTypeson.getJSONType = getJSONType;\nTypeson.JSON_TYPES = ['null', 'boolean', 'number', 'string', 'array', 'object'];\n\nexport default Typeson;\n","/* globals ImageData */\n// `ImageData` is browser / DOM specific (though `node-canvas` has it\n//   available on `Canvas`).\n\nimport Typeson from 'typeson';\n\nconst imagedata = {\n    imagedata: {\n        test (x) { return Typeson.toStringTag(x) === 'ImageData'; },\n        replace (d) {\n            return {\n                // Ensure `length` gets preserved for revival\n                array: [...d.data],\n                width: d.width,\n                height: d.height\n            };\n        },\n        revive (o) {\n            return new ImageData(\n                new Uint8ClampedArray(o.array), o.width, o.height\n            );\n        }\n    }\n};\n\nexport default imagedata;\n"],"names":["_typeof","obj","Symbol","_typeof2","iterator","constructor","prototype","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_defineProperty","_objectSpread","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","forEach","_slicedToArray","arr","_arrayWithHoles","Array","isArray","_iterableToArrayLimit","_arr","_n","_d","_e","_s","_i","next","push","_nonIterableRest","_toConsumableArray","_arrayWithoutHoles","arr2","_iterableToArray","iter","toString","call","from","_nonIterableSpread","TypesonPromise","f","p","toStringTag","onFulfilled","onRejected","_this","typesonResolve","typesonReject","res","r","v","map","meth","promArr","prom","hasOwn","hasOwnProperty","getProto","getPrototypeOf","fnToString","isThenable","catchCheck","isObject","val","slice","hasConstructorOf","a","b","proto","Ctor","isPlainObject","escapeKeyPathComponent","keyPathComponent","replace","unescapeKeyPathComponent","getByKeyPath","keyPath","period","indexOf","innerObj","substr","hasOwn$1","internalStateObjPropsToIgnore","nestedPathsFirst","as","keypath","match","bs","Typeson","options","plainObjectReplacers","nonplainObjectReplacers","revivers","types","_createClass","protoProps","staticProps","stringify","replacer","space","opts","stringification","encapsulated","encapsulate","JSON","stringifySync","throwOnBadSyncType","sync","stringifyAsync","parse","text","reviver","revive","parseSync","parseAsync","specialTypeNames","stateObj","returnTypeNames","rootTypeName","iterateNone","that","refObjs","refKeys","promisesDataRoot","cyclic","encapsulateObserver","ret","_encapsulate","finish","typeNames","values","getJSONType","Set","$types","$","checkPromises","_x","_x2","_checkPromises","regeneratorRuntime","mark","_callee2","promisesData","promResults","wrap","_callee2$","_context2","prev","all","pd","sent","_ref","_callee","promResult","newPromisesData","_promisesData$splice","_promisesData$splice2","prData","_prData","parentObj","detectedType","encaps","isTypesonPromise","encaps2","_callee$","_context","splice","abrupt","stop","_x3","_adaptBuiltinStateObjectProperties","ownKeysObj","cb","assign","vals","prop","tmp","resolvingTypesonPromise","observerData","$typeof","runObserver","type","awaitingTypesonPromise","includes","isNaN","Infinity","replaced","iterateIn","iterateUnsetNumeric","refIndex","cyclicKeypath","clone","isPlainObj","isArr","addLength","_loop","kp","endIterateIn","end","endIterateOwn","vl","_loop2","endIterateUnsetNumeric","plainObject","replacers","test","existing","replaceAsync","replacing","typeDetected","encapsulateSync","encapsulateAsync","keyPathResolutions","ignore$Types","_revive","_clone","k","Undefined","_keyPathResolutions$","_target","_clone2","_ret","reduce","reducer","Error","reviveAsync","checkUndefined","retrn","possibleTypesonPromise","revivePlainObjects","plainObjectTypes","entries","_ref2","_ref3","plain","sort","_ref4","setAtKeyPath","reviveSync","register","typeSpecSets","R","typeSpec","typeId","JSON_TYPES","spec","testPlainObjects","existingReplacer","Class","x","create","_spec2","replacerObj","bind","start","fallback","reviverObj","isUserObject","imagedata","d","array","data","width","height","o","ImageData","Uint8ClampedArray"],"mappings":"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"}