{"version":3,"file":"cloneable.js","sources":["../../types/cloneable.js","../../utils/generateUUID.js"],"sourcesContent":["import generateUUID from '../utils/generateUUID.js';\n\nconst cloneableObjectsByUUID = {};\n\nconst cloneable = {\n    cloneable: {\n        test (x) {\n            return x && typeof x === 'object' &&\n                typeof x[Symbol.for('cloneEncapsulate')] === 'function';\n        },\n        replace (clonable) {\n            const encapsulated = clonable[Symbol.for('cloneEncapsulate')]();\n            const uuid = generateUUID();\n            cloneableObjectsByUUID[uuid] = clonable;\n            return {uuid, encapsulated};\n        },\n        revive ({uuid, encapsulated}) {\n            return cloneableObjectsByUUID[uuid][Symbol.for('cloneRevive')](\n                encapsulated\n            );\n        }\n    }\n};\n\nexport default cloneable;\n","/* globals performance */\n\n// The `performance` global is optional\n\n/**\n * @todo We could use `import generateUUID from 'uuid/v4';` (but it needs\n *   crypto library, etc.; `rollup-plugin-node-builtins` doesn't recommend\n *   using its own version and though there is <https://www.npmjs.com/package/crypto-browserify>,\n *   it may be troublesome to bundle and not strongly needed)\n * @returns {string}\n */\nexport default function generateUUID () { //  Adapted from original: public domain/MIT: http://stackoverflow.com/a/8809472/271577\n    let d = new Date().getTime();\n    if (typeof performance !== 'undefined' &&\n        typeof performance.now === 'function'\n    ) {\n        d += performance.now(); // use high-precision timer if available\n    }\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/gu, function (c) {\n        /* eslint-disable no-bitwise */\n        const r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n        /* eslint-enable no-bitwise */\n    });\n}\n"],"names":["cloneableObjectsByUUID","cloneable","test","x","_typeof","Symbol","replace","clonable","encapsulated","uuid","generateUUID","d","Date","getTime","performance","now","c","r","Math","random","floor","toString","revive"],"mappings":"4fAEA,IAAMA,EAAyB,SAEb,CACdC,UAAW,CACPC,mBAAMC,UACKA,GAAkB,WAAbC,QAAOD,IAC8B,mBAAtCA,EAAEE,WAAW,sBAE5BC,yBAASC,OACCC,EAAeD,EAASF,WAAW,uBACnCI,ECDH,SAASC,mBAChBC,GAAI,IAAIC,MAAOC,gBACQ,oBAAhBC,aACoB,mBAApBA,YAAYC,MAEnBJ,GAAKG,YAAYC,OAEd,uCAAuCT,QAAQ,QAAU,SAAUU,OAEhEC,GAAKN,EAAoB,GAAhBO,KAAKC,UAAiB,GAAK,SAC1CR,EAAIO,KAAKE,MAAMT,EAAI,KACL,MAANK,EAAYC,EAAS,EAAJA,EAAU,GAAMI,SAAS,MDVjCX,UACbV,EAAuBS,GAAQF,EACxB,CAACE,KAAAA,EAAMD,aAAAA,IAElBc,8BAASb,IAAAA,KAAMD,IAAAA,oBACJR,EAAuBS,GAAMJ,WAAW,gBAC3CG"}