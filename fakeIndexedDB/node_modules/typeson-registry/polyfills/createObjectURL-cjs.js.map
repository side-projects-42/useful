{"version":3,"file":"createObjectURL-cjs.js","sources":["createObjectURL.js","../utils/generateUUID.js"],"sourcesContent":["/* eslint-env node */\n/* globals location, XMLHttpRequest */\n\n// Imperfectly polyfill jsdom for testing `Blob`/`File`\n\n// Todo: `generateUUID` and `whatwgURL` can be removed once\n//    `URL.createObjectURL` may be implemented in jsdom:\n//    https://github.com/jsdom/jsdom/issues/1721\n//    though local-xmlhttprequest may need to be adapted\nimport generateUUID from '../utils/generateUUID.js';\n\n// These are not working well with Rollup as imports\n/* globals require */\n/* eslint-disable global-require */\nconst mod = typeof module !== 'undefined';\nconst whatwgURL = (mod && require('whatwg-url')) || {};\n// We also need to tweak `XMLHttpRequest` which our types\n//    rely on to obtain the Blob/File content\n/* eslint-disable-next-line node/no-unpublished-require */\nconst utils = (mod && require('jsdom/lib/jsdom/living/generated/utils')) || {};\n/* eslint-enable global-require */\n\nconst {serializeURLOrigin, parseURL} = whatwgURL;\n\n/*\nboth are problematic:\neslint-disable-next-line node/no-unpublished-import\neslint-disable node/file-extension-in-import, import/extensions\nimport {serializeURLOrigin, parseURL} from 'whatwg-url';\nimport utils from 'jsdom/lib/jsdom/living/generated/utils';\n*/\n\nconst blobURLs = {};\nconst createObjectURL = function (blob) {\n    // https://github.com/jsdom/jsdom/issues/1721#issuecomment-282465529\n    const blobURL = 'blob:' +\n        serializeURLOrigin(parseURL(location.href)) + '/' + generateUUID();\n    blobURLs[blobURL] = blob;\n    return blobURL;\n};\n\nconst impl = utils.implSymbol;\nconst _xhropen = XMLHttpRequest.prototype.open;\nconst _xhrOverrideMimeType = XMLHttpRequest.prototype.overrideMimeType;\n// We only handle the case of binary, so no need to override `open`\n//   in all cases; but this only works if override is called first\nconst xmlHttpRequestOverrideMimeType = function ({polyfillDataURLs} = {}) {\n    return function (mimeType, ...args) {\n        if (mimeType === 'text/plain; charset=x-user-defined') {\n            this.open = function (method, url, async) {\n                if (url.startsWith('blob:')) {\n                    const blob = blobURLs[url];\n                    const responseType = 'text/plain'; // blob.type;\n                    // utf16le and base64 both convert lone surrogates\n                    const encoded = blob[impl]._buffer.toString('binary');\n                    // Not usable in jsdom which makes properties readonly,\n                    //   but local-xmlhttprequest can use (and jsdom can\n                    //   handle data URLs anyways)\n                    if (polyfillDataURLs) {\n                        this.status = 200;\n                        this.send = function () {\n                            // Empty\n                        };\n                        this.responseType = responseType || '';\n                        this.responseText = encoded || '';\n                        return undefined;\n                    }\n                    url = 'data:' + responseType + ',' +\n                        encodeURIComponent(encoded);\n                }\n                return _xhropen.call(this, method, url, async);\n            };\n        }\n        // The presence of `XMLHttpRequest.prototype.overrideMimeType`\n        //   is not really needed here, so making optional\n        return _xhrOverrideMimeType &&\n            _xhrOverrideMimeType.call(this, mimeType, ...args);\n    };\n};\n\nexport {createObjectURL, xmlHttpRequestOverrideMimeType};\n","/* globals performance */\n\n// The `performance` global is optional\n\n/**\n * @todo We could use `import generateUUID from 'uuid/v4';` (but it needs\n *   crypto library, etc.; `rollup-plugin-node-builtins` doesn't recommend\n *   using its own version and though there is <https://www.npmjs.com/package/crypto-browserify>,\n *   it may be troublesome to bundle and not strongly needed)\n * @returns {string}\n */\nexport default function generateUUID () { //  Adapted from original: public domain/MIT: http://stackoverflow.com/a/8809472/271577\n    let d = new Date().getTime();\n    if (typeof performance !== 'undefined' &&\n        typeof performance.now === 'function'\n    ) {\n        d += performance.now(); // use high-precision timer if available\n    }\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/gu, function (c) {\n        /* eslint-disable no-bitwise */\n        const r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n        /* eslint-enable no-bitwise */\n    });\n}\n"],"names":["mod","module","whatwgURL","require","utils","serializeURLOrigin","parseURL","blobURLs","impl","implSymbol","_xhropen","XMLHttpRequest","prototype","open","_xhrOverrideMimeType","overrideMimeType","createObjectURL","blob","blobURL","location","href","generateUUID","d","Date","getTime","performance","now","replace","c","r","Math","random","floor","toString","xmlHttpRequestOverrideMimeType","polyfillDataURLs","mimeType","method","url","async","startsWith","encoded","_buffer","status","send","responseType","responseText","encodeURIComponent","call","this","args"],"mappings":"4MAcA,IAAMA,EAAwB,oBAAXC,OACbC,EAAaF,GAAOG,QAAQ,eAAkB,GAI9CC,EAASJ,GAAOG,QAAQ,2CAA8C,GAGrEE,EAAgCH,EAAhCG,mBAAoBC,EAAYJ,EAAZI,SAUrBC,EAAW,GASXC,EAAOJ,EAAMK,WACbC,EAAWC,eAAeC,UAAUC,KACpCC,EAAuBH,eAAeC,UAAUG,mCAV9B,SAAlBC,gBAA4BC,OAExBC,EAAU,QACZb,EAAmBC,EAASa,SAASC,OAAS,ICzBvC,SAASC,mBAChBC,GAAI,IAAIC,MAAOC,gBACQ,oBAAhBC,aACoB,mBAApBA,YAAYC,MAEnBJ,GAAKG,YAAYC,OAEd,uCAAuCC,QAAQ,QAAU,SAAUC,OAEhEC,GAAKP,EAAoB,GAAhBQ,KAAKC,UAAiB,GAAK,SAC1CT,EAAIQ,KAAKE,MAAMV,EAAI,KACL,MAANM,EAAYC,EAAS,EAAJA,EAAU,GAAMI,SAAS,MDcEZ,UACxDd,EAASW,GAAWD,EACbC,oCAQ4B,SAAjCgB,qCAA4CC,0DAAoB,IAApBA,wBACvC,SAAUC,GACI,uCAAbA,SACKvB,KAAO,SAAUwB,EAAQC,EAAKC,MAC3BD,EAAIE,WAAW,SAAU,KAInBC,EAHOlC,EAAS+B,GAGD9B,GAAMkC,QAAQT,SAAS,aAIxCE,cACKQ,OAAS,SACTC,KAAO,kBAGPC,aAXY,uBAYZC,aAAeL,GAAW,IAGnCH,EAAM,mBACFS,mBAAmBN,UAEpB/B,EAASsC,KAAKC,KAAMZ,EAAQC,EAAKC,gCAvBtBW,mCAAAA,2BA4BnBpC,GACHA,EAAqBkC,WAArBlC,GAA0BmC,KAAMb,UAAac"}